package com.optimussoftware.db;

import org.greenrobot.greendao.annotation.*;

import com.optimussoftware.db.DaoSession;
import org.greenrobot.greendao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.

/**
 * Entity mapped to table "USER_INTEREST".
 */
@Entity(active = true)
public class UserInterest {

    @Id(autoincrement = true)
    private Long id;
    private String interest_id;

    @NotNull
    private String user_id;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient UserInterestDao myDao;

    @ToOne(joinProperty = "user_id")
    private User myInterests;

    @Generated
    private transient String myInterests__resolvedKey;

    @Generated
    public UserInterest() {
    }

    public UserInterest(Long id) {
        this.id = id;
    }

    @Generated
    public UserInterest(Long id, String interest_id, String user_id) {
        this.id = id;
        this.interest_id = interest_id;
        this.user_id = user_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getUserInterestDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getInterest_id() {
        return interest_id;
    }

    public void setInterest_id(String interest_id) {
        this.interest_id = interest_id;
    }

    @NotNull
    public String getUser_id() {
        return user_id;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setUser_id(@NotNull String user_id) {
        this.user_id = user_id;
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public User getMyInterests() {
        String __key = this.user_id;
        if (myInterests__resolvedKey == null || myInterests__resolvedKey != __key) {
            __throwIfDetached();
            UserDao targetDao = daoSession.getUserDao();
            User myInterestsNew = targetDao.load(__key);
            synchronized (this) {
                myInterests = myInterestsNew;
            	myInterests__resolvedKey = __key;
            }
        }
        return myInterests;
    }

    @Generated
    public void setMyInterests(@NotNull User myInterests) {
        if (myInterests == null) {
            throw new DaoException("To-one property 'user_id' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.myInterests = myInterests;
            user_id = myInterests.get_id();
            myInterests__resolvedKey = user_id;
        }
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

}
