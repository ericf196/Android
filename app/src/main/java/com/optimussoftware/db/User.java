package com.optimussoftware.db;

import org.greenrobot.greendao.annotation.*;

import java.util.List;
import com.optimussoftware.db.DaoSession;
import org.greenrobot.greendao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.

/**
 * Entity mapped to table "USER".
 */
@SuppressWarnings("ALL")
@Entity(active = true)
public class User implements java.io.Serializable {

    @Id
    @NotNull
    @Unique
    private String _id;
    private String _etag;
    private java.util.Date created;
    private java.util.Date updated;
    private Boolean active;
    private Boolean deleted;
    private String social_id;
    private String password;

    @NotNull
    private String email;
    private String first_name;
    private String middle_name;
    private String last_name;
    private String full_name;
    private String phone;
    private String location;
    private String about_me;
    private String gender;
    private Integer timezone;
    private String link;
    private String source;
    private String profile_photo;
    private java.util.Date birthday;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient UserDao myDao;

    @ToMany(joinProperties = {
        @JoinProperty(name = "_id", referencedName = "user_id")
    })
    private List<Dislikes> TheUserDislike;

    @ToMany(joinProperties = {
        @JoinProperty(name = "_id", referencedName = "user_id")
    })
    private List<Favorites> TheUserFavorite;

    @ToMany(joinProperties = {
        @JoinProperty(name = "_id", referencedName = "user_id")
    })
    private List<Likes> TheUserLike;

    @ToMany(joinProperties = {
        @JoinProperty(name = "_id", referencedName = "user_id")
    })
    private List<UserInterest> wish;

    @ToMany(joinProperties = {
        @JoinProperty(name = "_id", referencedName = "user_id")
    })
    private List<Review> TheUserReviews;

    @ToMany(joinProperties = {
        @JoinProperty(name = "_id", referencedName = "user_id")
    })
    private List<Visit> TheUserVisit;

    @Generated
    public User() {
    }

    public User(String _id) {
        this._id = _id;
    }

    @Generated
    public User(String _id, String _etag, java.util.Date created, java.util.Date updated, Boolean active, Boolean deleted, String social_id, String password, String email, String first_name, String middle_name, String last_name, String full_name, String phone, String location, String about_me, String gender, Integer timezone, String link, String source, String profile_photo, java.util.Date birthday) {
        this._id = _id;
        this._etag = _etag;
        this.created = created;
        this.updated = updated;
        this.active = active;
        this.deleted = deleted;
        this.social_id = social_id;
        this.password = password;
        this.email = email;
        this.first_name = first_name;
        this.middle_name = middle_name;
        this.last_name = last_name;
        this.full_name = full_name;
        this.phone = phone;
        this.location = location;
        this.about_me = about_me;
        this.gender = gender;
        this.timezone = timezone;
        this.link = link;
        this.source = source;
        this.profile_photo = profile_photo;
        this.birthday = birthday;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getUserDao() : null;
    }

    @NotNull
    public String get_id() {
        return _id;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void set_id(@NotNull String _id) {
        this._id = _id;
    }

    public String get_etag() {
        return _etag;
    }

    public void set_etag(String _etag) {
        this._etag = _etag;
    }

    public java.util.Date getCreated() {
        return created;
    }

    public void setCreated(java.util.Date created) {
        this.created = created;
    }

    public java.util.Date getUpdated() {
        return updated;
    }

    public void setUpdated(java.util.Date updated) {
        this.updated = updated;
    }

    public Boolean getActive() {
        return active;
    }

    public void setActive(Boolean active) {
        this.active = active;
    }

    public Boolean getDeleted() {
        return deleted;
    }

    public void setDeleted(Boolean deleted) {
        this.deleted = deleted;
    }

    public String getSocial_id() {
        return social_id;
    }

    public void setSocial_id(String social_id) {
        this.social_id = social_id;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    @NotNull
    public String getEmail() {
        return email;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setEmail(@NotNull String email) {
        this.email = email;
    }

    public String getFirst_name() {
        return first_name;
    }

    public void setFirst_name(String first_name) {
        this.first_name = first_name;
    }

    public String getMiddle_name() {
        return middle_name;
    }

    public void setMiddle_name(String middle_name) {
        this.middle_name = middle_name;
    }

    public String getLast_name() {
        return last_name;
    }

    public void setLast_name(String last_name) {
        this.last_name = last_name;
    }

    public String getFull_name() {
        return full_name;
    }

    public void setFull_name(String full_name) {
        this.full_name = full_name;
    }

    public String getPhone() {
        return phone;
    }

    public void setPhone(String phone) {
        this.phone = phone;
    }

    public String getLocation() {
        return location;
    }

    public void setLocation(String location) {
        this.location = location;
    }

    public String getAbout_me() {
        return about_me;
    }

    public void setAbout_me(String about_me) {
        this.about_me = about_me;
    }

    public String getGender() {
        return gender;
    }

    public void setGender(String gender) {
        this.gender = gender;
    }

    public Integer getTimezone() {
        return timezone;
    }

    public void setTimezone(Integer timezone) {
        this.timezone = timezone;
    }

    public String getLink() {
        return link;
    }

    public void setLink(String link) {
        this.link = link;
    }

    public String getSource() {
        return source;
    }

    public void setSource(String source) {
        this.source = source;
    }

    public String getProfile_photo() {
        return profile_photo;
    }

    public void setProfile_photo(String profile_photo) {
        this.profile_photo = profile_photo;
    }

    public java.util.Date getBirthday() {
        return birthday;
    }

    public void setBirthday(java.util.Date birthday) {
        this.birthday = birthday;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<Dislikes> getTheUserDislike() {
        if (TheUserDislike == null) {
            __throwIfDetached();
            DislikesDao targetDao = daoSession.getDislikesDao();
            List<Dislikes> TheUserDislikeNew = targetDao._queryUser_TheUserDislike(_id);
            synchronized (this) {
                if(TheUserDislike == null) {
                    TheUserDislike = TheUserDislikeNew;
                }
            }
        }
        return TheUserDislike;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetTheUserDislike() {
        TheUserDislike = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<Favorites> getTheUserFavorite() {
        if (TheUserFavorite == null) {
            __throwIfDetached();
            FavoritesDao targetDao = daoSession.getFavoritesDao();
            List<Favorites> TheUserFavoriteNew = targetDao._queryUser_TheUserFavorite(_id);
            synchronized (this) {
                if(TheUserFavorite == null) {
                    TheUserFavorite = TheUserFavoriteNew;
                }
            }
        }
        return TheUserFavorite;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetTheUserFavorite() {
        TheUserFavorite = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<Likes> getTheUserLike() {
        if (TheUserLike == null) {
            __throwIfDetached();
            LikesDao targetDao = daoSession.getLikesDao();
            List<Likes> TheUserLikeNew = targetDao._queryUser_TheUserLike(_id);
            synchronized (this) {
                if(TheUserLike == null) {
                    TheUserLike = TheUserLikeNew;
                }
            }
        }
        return TheUserLike;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetTheUserLike() {
        TheUserLike = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<UserInterest> getWish() {
        if (wish == null) {
            __throwIfDetached();
            UserInterestDao targetDao = daoSession.getUserInterestDao();
            List<UserInterest> wishNew = targetDao._queryUser_Wish(_id);
            synchronized (this) {
                if(wish == null) {
                    wish = wishNew;
                }
            }
        }
        return wish;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetWish() {
        wish = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<Review> getTheUserReviews() {
        if (TheUserReviews == null) {
            __throwIfDetached();
            ReviewDao targetDao = daoSession.getReviewDao();
            List<Review> TheUserReviewsNew = targetDao._queryUser_TheUserReviews(_id);
            synchronized (this) {
                if(TheUserReviews == null) {
                    TheUserReviews = TheUserReviewsNew;
                }
            }
        }
        return TheUserReviews;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetTheUserReviews() {
        TheUserReviews = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<Visit> getTheUserVisit() {
        if (TheUserVisit == null) {
            __throwIfDetached();
            VisitDao targetDao = daoSession.getVisitDao();
            List<Visit> TheUserVisitNew = targetDao._queryUser_TheUserVisit(_id);
            synchronized (this) {
                if(TheUserVisit == null) {
                    TheUserVisit = TheUserVisitNew;
                }
            }
        }
        return TheUserVisit;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetTheUserVisit() {
        TheUserVisit = null;
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

}
