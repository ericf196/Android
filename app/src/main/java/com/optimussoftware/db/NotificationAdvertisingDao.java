package com.optimussoftware.db;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NOTIFICATION_ADVERTISING".
*/
public class NotificationAdvertisingDao extends AbstractDao<NotificationAdvertising, String> {

    public static final String TABLENAME = "NOTIFICATION_ADVERTISING";

    /**
     * Properties of entity NotificationAdvertising.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, String.class, "_id", true, "_ID");
        public final static Property Date = new Property(1, java.util.Date.class, "date", false, "DATE");
        public final static Property Viewed = new Property(2, Boolean.class, "viewed", false, "VIEWED");
        public final static Property Delete = new Property(3, Boolean.class, "delete", false, "DELETE");
        public final static Property Advertising_id = new Property(4, String.class, "advertising_id", false, "ADVERTISING_ID");
        public final static Property Campaign_id = new Property(5, String.class, "campaign_id", false, "CAMPAIGN_ID");
    }

    private DaoSession daoSession;

    private Query<NotificationAdvertising> advertising_TheNotifiAdvertisingQuery;
    private Query<NotificationAdvertising> campaign_TheNotifiCampaignQuery;

    public NotificationAdvertisingDao(DaoConfig config) {
        super(config);
    }
    
    public NotificationAdvertisingDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NOTIFICATION_ADVERTISING\" (" + //
                "\"_ID\" TEXT PRIMARY KEY NOT NULL UNIQUE ," + // 0: _id
                "\"DATE\" INTEGER," + // 1: date
                "\"VIEWED\" INTEGER," + // 2: viewed
                "\"DELETE\" INTEGER," + // 3: delete
                "\"ADVERTISING_ID\" TEXT NOT NULL ," + // 4: advertising_id
                "\"CAMPAIGN_ID\" TEXT NOT NULL );"); // 5: campaign_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NOTIFICATION_ADVERTISING\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, NotificationAdvertising entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.get_id());
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(2, date.getTime());
        }
 
        Boolean viewed = entity.getViewed();
        if (viewed != null) {
            stmt.bindLong(3, viewed ? 1L: 0L);
        }
 
        Boolean delete = entity.getDelete();
        if (delete != null) {
            stmt.bindLong(4, delete ? 1L: 0L);
        }
        stmt.bindString(5, entity.getAdvertising_id());
        stmt.bindString(6, entity.getCampaign_id());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, NotificationAdvertising entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.get_id());
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(2, date.getTime());
        }
 
        Boolean viewed = entity.getViewed();
        if (viewed != null) {
            stmt.bindLong(3, viewed ? 1L: 0L);
        }
 
        Boolean delete = entity.getDelete();
        if (delete != null) {
            stmt.bindLong(4, delete ? 1L: 0L);
        }
        stmt.bindString(5, entity.getAdvertising_id());
        stmt.bindString(6, entity.getCampaign_id());
    }

    @Override
    protected final void attachEntity(NotificationAdvertising entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    @Override
    public NotificationAdvertising readEntity(Cursor cursor, int offset) {
        NotificationAdvertising entity = new NotificationAdvertising( //
            cursor.getString(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // date
            cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0, // viewed
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0, // delete
            cursor.getString(offset + 4), // advertising_id
            cursor.getString(offset + 5) // campaign_id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, NotificationAdvertising entity, int offset) {
        entity.set_id(cursor.getString(offset + 0));
        entity.setDate(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
        entity.setViewed(cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0);
        entity.setDelete(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
        entity.setAdvertising_id(cursor.getString(offset + 4));
        entity.setCampaign_id(cursor.getString(offset + 5));
     }
    
    @Override
    protected final String updateKeyAfterInsert(NotificationAdvertising entity, long rowId) {
        return entity.get_id();
    }
    
    @Override
    public String getKey(NotificationAdvertising entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(NotificationAdvertising entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "theNotifiAdvertising" to-many relationship of Advertising. */
    public List<NotificationAdvertising> _queryAdvertising_TheNotifiAdvertising(String advertising_id) {
        synchronized (this) {
            if (advertising_TheNotifiAdvertisingQuery == null) {
                QueryBuilder<NotificationAdvertising> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Advertising_id.eq(null));
                advertising_TheNotifiAdvertisingQuery = queryBuilder.build();
            }
        }
        Query<NotificationAdvertising> query = advertising_TheNotifiAdvertisingQuery.forCurrentThread();
        query.setParameter(0, advertising_id);
        return query.list();
    }

    /** Internal query to resolve the "theNotifiCampaign" to-many relationship of Campaign. */
    public List<NotificationAdvertising> _queryCampaign_TheNotifiCampaign(String campaign_id) {
        synchronized (this) {
            if (campaign_TheNotifiCampaignQuery == null) {
                QueryBuilder<NotificationAdvertising> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Campaign_id.eq(null));
                campaign_TheNotifiCampaignQuery = queryBuilder.build();
            }
        }
        Query<NotificationAdvertising> query = campaign_TheNotifiCampaignQuery.forCurrentThread();
        query.setParameter(0, campaign_id);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getAdvertisingDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getCampaignDao().getAllColumns());
            builder.append(" FROM NOTIFICATION_ADVERTISING T");
            builder.append(" LEFT JOIN ADVERTISING T0 ON T.\"ADVERTISING_ID\"=T0.\"_ID\"");
            builder.append(" LEFT JOIN CAMPAIGN T1 ON T.\"CAMPAIGN_ID\"=T1.\"_ID\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected NotificationAdvertising loadCurrentDeep(Cursor cursor, boolean lock) {
        NotificationAdvertising entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Advertising TheNotifiA = loadCurrentOther(daoSession.getAdvertisingDao(), cursor, offset);
         if(TheNotifiA != null) {
            entity.setTheNotifiA(TheNotifiA);
        }
        offset += daoSession.getAdvertisingDao().getAllColumns().length;

        Campaign TheNotifiC = loadCurrentOther(daoSession.getCampaignDao(), cursor, offset);
         if(TheNotifiC != null) {
            entity.setTheNotifiC(TheNotifiC);
        }

        return entity;    
    }

    public NotificationAdvertising loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<NotificationAdvertising> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<NotificationAdvertising> list = new ArrayList<NotificationAdvertising>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<NotificationAdvertising> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<NotificationAdvertising> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
