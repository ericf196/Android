package com.optimussoftware.db;

import org.greenrobot.greendao.annotation.*;

import com.optimussoftware.db.DaoSession;
import org.greenrobot.greendao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.

/**
 * Entity mapped to table "FAVORITES".
 */
@SuppressWarnings("ALL")
@Entity(active = true)
public class Favorites implements java.io.Serializable {

    @Id
    @NotNull
    @Unique
    private String _id;
    private String _etag;
    private java.util.Date created;
    private java.util.Date updated;
    private Boolean active;
    private Boolean deleted;
    private String advertising_id;

    @NotNull
    private String user_id;
    private String location_id;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient FavoritesDao myDao;

    @ToOne(joinProperty = "user_id")
    private User myFavorites;

    @Generated
    private transient String myFavorites__resolvedKey;

    @ToOne(joinProperty = "location_id")
    private Location myFavorite;

    @Generated
    private transient String myFavorite__resolvedKey;

    @Generated
    public Favorites() {
    }

    public Favorites(String _id) {
        this._id = _id;
    }

    @Generated
    public Favorites(String _id, String _etag, java.util.Date created, java.util.Date updated, Boolean active, Boolean deleted, String advertising_id, String user_id, String location_id) {
        this._id = _id;
        this._etag = _etag;
        this.created = created;
        this.updated = updated;
        this.active = active;
        this.deleted = deleted;
        this.advertising_id = advertising_id;
        this.user_id = user_id;
        this.location_id = location_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getFavoritesDao() : null;
    }

    @NotNull
    public String get_id() {
        return _id;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void set_id(@NotNull String _id) {
        this._id = _id;
    }

    public String get_etag() {
        return _etag;
    }

    public void set_etag(String _etag) {
        this._etag = _etag;
    }

    public java.util.Date getCreated() {
        return created;
    }

    public void setCreated(java.util.Date created) {
        this.created = created;
    }

    public java.util.Date getUpdated() {
        return updated;
    }

    public void setUpdated(java.util.Date updated) {
        this.updated = updated;
    }

    public Boolean getActive() {
        return active;
    }

    public void setActive(Boolean active) {
        this.active = active;
    }

    public Boolean getDeleted() {
        return deleted;
    }

    public void setDeleted(Boolean deleted) {
        this.deleted = deleted;
    }

    public String getAdvertising_id() {
        return advertising_id;
    }

    public void setAdvertising_id(String advertising_id) {
        this.advertising_id = advertising_id;
    }

    @NotNull
    public String getUser_id() {
        return user_id;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setUser_id(@NotNull String user_id) {
        this.user_id = user_id;
    }

    public String getLocation_id() {
        return location_id;
    }

    public void setLocation_id(String location_id) {
        this.location_id = location_id;
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public User getMyFavorites() {
        String __key = this.user_id;
        if (myFavorites__resolvedKey == null || myFavorites__resolvedKey != __key) {
            __throwIfDetached();
            UserDao targetDao = daoSession.getUserDao();
            User myFavoritesNew = targetDao.load(__key);
            synchronized (this) {
                myFavorites = myFavoritesNew;
            	myFavorites__resolvedKey = __key;
            }
        }
        return myFavorites;
    }

    @Generated
    public void setMyFavorites(@NotNull User myFavorites) {
        if (myFavorites == null) {
            throw new DaoException("To-one property 'user_id' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.myFavorites = myFavorites;
            user_id = myFavorites.get_id();
            myFavorites__resolvedKey = user_id;
        }
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public Location getMyFavorite() {
        String __key = this.location_id;
        if (myFavorite__resolvedKey == null || myFavorite__resolvedKey != __key) {
            __throwIfDetached();
            LocationDao targetDao = daoSession.getLocationDao();
            Location myFavoriteNew = targetDao.load(__key);
            synchronized (this) {
                myFavorite = myFavoriteNew;
            	myFavorite__resolvedKey = __key;
            }
        }
        return myFavorite;
    }

    @Generated
    public void setMyFavorite(Location myFavorite) {
        synchronized (this) {
            this.myFavorite = myFavorite;
            location_id = myFavorite == null ? null : myFavorite.get_id();
            myFavorite__resolvedKey = location_id;
        }
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

}
