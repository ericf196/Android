package com.optimussoftware.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CAMPAIGN".
*/
public class CampaignDao extends AbstractDao<Campaign, String> {

    public static final String TABLENAME = "CAMPAIGN";

    /**
     * Properties of entity Campaign.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, String.class, "_id", true, "_ID");
        public final static Property _etag = new Property(1, String.class, "_etag", false, "_ETAG");
        public final static Property Created = new Property(2, java.util.Date.class, "created", false, "CREATED");
        public final static Property Updated = new Property(3, java.util.Date.class, "updated", false, "UPDATED");
        public final static Property Active = new Property(4, Boolean.class, "active", false, "ACTIVE");
        public final static Property Deleted = new Property(5, Boolean.class, "deleted", false, "DELETED");
        public final static Property Name = new Property(6, String.class, "name", false, "NAME");
        public final static Property Finish_date = new Property(7, java.util.Date.class, "finish_date", false, "FINISH_DATE");
        public final static Property Start_date = new Property(8, java.util.Date.class, "start_date", false, "START_DATE");
        public final static Property Start_hour = new Property(9, Integer.class, "start_hour", false, "START_HOUR");
        public final static Property End_hour = new Property(10, Integer.class, "end_hour", false, "END_HOUR");
        public final static Property Max_age = new Property(11, Integer.class, "max_age", false, "MAX_AGE");
        public final static Property EfectiveDays = new Property(12, String.class, "efectiveDays", false, "EFECTIVE_DAYS");
    }

    private DaoSession daoSession;


    public CampaignDao(DaoConfig config) {
        super(config);
    }
    
    public CampaignDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CAMPAIGN\" (" + //
                "\"_ID\" TEXT PRIMARY KEY NOT NULL UNIQUE ," + // 0: _id
                "\"_ETAG\" TEXT," + // 1: _etag
                "\"CREATED\" INTEGER," + // 2: created
                "\"UPDATED\" INTEGER," + // 3: updated
                "\"ACTIVE\" INTEGER," + // 4: active
                "\"DELETED\" INTEGER," + // 5: deleted
                "\"NAME\" TEXT," + // 6: name
                "\"FINISH_DATE\" INTEGER," + // 7: finish_date
                "\"START_DATE\" INTEGER," + // 8: start_date
                "\"START_HOUR\" INTEGER," + // 9: start_hour
                "\"END_HOUR\" INTEGER," + // 10: end_hour
                "\"MAX_AGE\" INTEGER," + // 11: max_age
                "\"EFECTIVE_DAYS\" TEXT);"); // 12: efectiveDays
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CAMPAIGN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Campaign entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.get_id());
 
        String _etag = entity.get_etag();
        if (_etag != null) {
            stmt.bindString(2, _etag);
        }
 
        java.util.Date created = entity.getCreated();
        if (created != null) {
            stmt.bindLong(3, created.getTime());
        }
 
        java.util.Date updated = entity.getUpdated();
        if (updated != null) {
            stmt.bindLong(4, updated.getTime());
        }
 
        Boolean active = entity.getActive();
        if (active != null) {
            stmt.bindLong(5, active ? 1L: 0L);
        }
 
        Boolean deleted = entity.getDeleted();
        if (deleted != null) {
            stmt.bindLong(6, deleted ? 1L: 0L);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(7, name);
        }
 
        java.util.Date finish_date = entity.getFinish_date();
        if (finish_date != null) {
            stmt.bindLong(8, finish_date.getTime());
        }
 
        java.util.Date start_date = entity.getStart_date();
        if (start_date != null) {
            stmt.bindLong(9, start_date.getTime());
        }
 
        Integer start_hour = entity.getStart_hour();
        if (start_hour != null) {
            stmt.bindLong(10, start_hour);
        }
 
        Integer end_hour = entity.getEnd_hour();
        if (end_hour != null) {
            stmt.bindLong(11, end_hour);
        }
 
        Integer max_age = entity.getMax_age();
        if (max_age != null) {
            stmt.bindLong(12, max_age);
        }
 
        String efectiveDays = entity.getEfectiveDays();
        if (efectiveDays != null) {
            stmt.bindString(13, efectiveDays);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Campaign entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.get_id());
 
        String _etag = entity.get_etag();
        if (_etag != null) {
            stmt.bindString(2, _etag);
        }
 
        java.util.Date created = entity.getCreated();
        if (created != null) {
            stmt.bindLong(3, created.getTime());
        }
 
        java.util.Date updated = entity.getUpdated();
        if (updated != null) {
            stmt.bindLong(4, updated.getTime());
        }
 
        Boolean active = entity.getActive();
        if (active != null) {
            stmt.bindLong(5, active ? 1L: 0L);
        }
 
        Boolean deleted = entity.getDeleted();
        if (deleted != null) {
            stmt.bindLong(6, deleted ? 1L: 0L);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(7, name);
        }
 
        java.util.Date finish_date = entity.getFinish_date();
        if (finish_date != null) {
            stmt.bindLong(8, finish_date.getTime());
        }
 
        java.util.Date start_date = entity.getStart_date();
        if (start_date != null) {
            stmt.bindLong(9, start_date.getTime());
        }
 
        Integer start_hour = entity.getStart_hour();
        if (start_hour != null) {
            stmt.bindLong(10, start_hour);
        }
 
        Integer end_hour = entity.getEnd_hour();
        if (end_hour != null) {
            stmt.bindLong(11, end_hour);
        }
 
        Integer max_age = entity.getMax_age();
        if (max_age != null) {
            stmt.bindLong(12, max_age);
        }
 
        String efectiveDays = entity.getEfectiveDays();
        if (efectiveDays != null) {
            stmt.bindString(13, efectiveDays);
        }
    }

    @Override
    protected final void attachEntity(Campaign entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    @Override
    public Campaign readEntity(Cursor cursor, int offset) {
        Campaign entity = new Campaign( //
            cursor.getString(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // _etag
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // created
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // updated
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0, // active
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0, // deleted
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // name
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)), // finish_date
            cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)), // start_date
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // start_hour
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // end_hour
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // max_age
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // efectiveDays
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Campaign entity, int offset) {
        entity.set_id(cursor.getString(offset + 0));
        entity.set_etag(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCreated(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setUpdated(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setActive(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
        entity.setDeleted(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
        entity.setName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setFinish_date(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
        entity.setStart_date(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
        entity.setStart_hour(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setEnd_hour(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setMax_age(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setEfectiveDays(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Campaign entity, long rowId) {
        return entity.get_id();
    }
    
    @Override
    public String getKey(Campaign entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Campaign entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
