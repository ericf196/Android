package com.optimussoftware.db;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "IMAGE".
*/
public class ImageDao extends AbstractDao<Image, String> {

    public static final String TABLENAME = "IMAGE";

    /**
     * Properties of entity Image.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, String.class, "_id", true, "_ID");
        public final static Property _etag = new Property(1, String.class, "_etag", false, "_ETAG");
        public final static Property Created = new Property(2, java.util.Date.class, "created", false, "CREATED");
        public final static Property Updated = new Property(3, java.util.Date.class, "updated", false, "UPDATED");
        public final static Property Active = new Property(4, Boolean.class, "active", false, "ACTIVE");
        public final static Property Deleted = new Property(5, Boolean.class, "deleted", false, "DELETED");
        public final static Property Name = new Property(6, String.class, "name", false, "NAME");
        public final static Property File = new Property(7, String.class, "file", false, "FILE");
        public final static Property Width = new Property(8, Integer.class, "width", false, "WIDTH");
        public final static Property Height = new Property(9, Integer.class, "height", false, "HEIGHT");
        public final static Property Position = new Property(10, Integer.class, "position", false, "POSITION");
        public final static Property Advertising_id = new Property(11, String.class, "advertising_id", false, "ADVERTISING_ID");
    }

    private DaoSession daoSession;

    private Query<Image> advertising_TheAdvertisingImageQuery;

    public ImageDao(DaoConfig config) {
        super(config);
    }
    
    public ImageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"IMAGE\" (" + //
                "\"_ID\" TEXT PRIMARY KEY NOT NULL UNIQUE ," + // 0: _id
                "\"_ETAG\" TEXT," + // 1: _etag
                "\"CREATED\" INTEGER," + // 2: created
                "\"UPDATED\" INTEGER," + // 3: updated
                "\"ACTIVE\" INTEGER," + // 4: active
                "\"DELETED\" INTEGER," + // 5: deleted
                "\"NAME\" TEXT," + // 6: name
                "\"FILE\" TEXT," + // 7: file
                "\"WIDTH\" INTEGER," + // 8: width
                "\"HEIGHT\" INTEGER," + // 9: height
                "\"POSITION\" INTEGER," + // 10: position
                "\"ADVERTISING_ID\" TEXT NOT NULL );"); // 11: advertising_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"IMAGE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Image entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.get_id());
 
        String _etag = entity.get_etag();
        if (_etag != null) {
            stmt.bindString(2, _etag);
        }
 
        java.util.Date created = entity.getCreated();
        if (created != null) {
            stmt.bindLong(3, created.getTime());
        }
 
        java.util.Date updated = entity.getUpdated();
        if (updated != null) {
            stmt.bindLong(4, updated.getTime());
        }
 
        Boolean active = entity.getActive();
        if (active != null) {
            stmt.bindLong(5, active ? 1L: 0L);
        }
 
        Boolean deleted = entity.getDeleted();
        if (deleted != null) {
            stmt.bindLong(6, deleted ? 1L: 0L);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(7, name);
        }
 
        String file = entity.getFile();
        if (file != null) {
            stmt.bindString(8, file);
        }
 
        Integer width = entity.getWidth();
        if (width != null) {
            stmt.bindLong(9, width);
        }
 
        Integer height = entity.getHeight();
        if (height != null) {
            stmt.bindLong(10, height);
        }
 
        Integer position = entity.getPosition();
        if (position != null) {
            stmt.bindLong(11, position);
        }
        stmt.bindString(12, entity.getAdvertising_id());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Image entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.get_id());
 
        String _etag = entity.get_etag();
        if (_etag != null) {
            stmt.bindString(2, _etag);
        }
 
        java.util.Date created = entity.getCreated();
        if (created != null) {
            stmt.bindLong(3, created.getTime());
        }
 
        java.util.Date updated = entity.getUpdated();
        if (updated != null) {
            stmt.bindLong(4, updated.getTime());
        }
 
        Boolean active = entity.getActive();
        if (active != null) {
            stmt.bindLong(5, active ? 1L: 0L);
        }
 
        Boolean deleted = entity.getDeleted();
        if (deleted != null) {
            stmt.bindLong(6, deleted ? 1L: 0L);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(7, name);
        }
 
        String file = entity.getFile();
        if (file != null) {
            stmt.bindString(8, file);
        }
 
        Integer width = entity.getWidth();
        if (width != null) {
            stmt.bindLong(9, width);
        }
 
        Integer height = entity.getHeight();
        if (height != null) {
            stmt.bindLong(10, height);
        }
 
        Integer position = entity.getPosition();
        if (position != null) {
            stmt.bindLong(11, position);
        }
        stmt.bindString(12, entity.getAdvertising_id());
    }

    @Override
    protected final void attachEntity(Image entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    @Override
    public Image readEntity(Cursor cursor, int offset) {
        Image entity = new Image( //
            cursor.getString(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // _etag
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // created
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // updated
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0, // active
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0, // deleted
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // name
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // file
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // width
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // height
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // position
            cursor.getString(offset + 11) // advertising_id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Image entity, int offset) {
        entity.set_id(cursor.getString(offset + 0));
        entity.set_etag(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCreated(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setUpdated(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setActive(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
        entity.setDeleted(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
        entity.setName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setFile(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setWidth(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setHeight(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setPosition(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setAdvertising_id(cursor.getString(offset + 11));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Image entity, long rowId) {
        return entity.get_id();
    }
    
    @Override
    public String getKey(Image entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Image entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "theAdvertisingImage" to-many relationship of Advertising. */
    public List<Image> _queryAdvertising_TheAdvertisingImage(String advertising_id) {
        synchronized (this) {
            if (advertising_TheAdvertisingImageQuery == null) {
                QueryBuilder<Image> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Advertising_id.eq(null));
                advertising_TheAdvertisingImageQuery = queryBuilder.build();
            }
        }
        Query<Image> query = advertising_TheAdvertisingImageQuery.forCurrentThread();
        query.setParameter(0, advertising_id);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getAdvertisingDao().getAllColumns());
            builder.append(" FROM IMAGE T");
            builder.append(" LEFT JOIN ADVERTISING T0 ON T.\"ADVERTISING_ID\"=T0.\"_ID\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Image loadCurrentDeep(Cursor cursor, boolean lock) {
        Image entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Advertising images = loadCurrentOther(daoSession.getAdvertisingDao(), cursor, offset);
         if(images != null) {
            entity.setImages(images);
        }

        return entity;    
    }

    public Image loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Image> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Image> list = new ArrayList<Image>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Image> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Image> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
