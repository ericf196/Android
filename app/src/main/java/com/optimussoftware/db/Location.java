package com.optimussoftware.db;

import org.greenrobot.greendao.annotation.*;

import java.util.List;
import com.optimussoftware.db.DaoSession;
import org.greenrobot.greendao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.

/**
 * Entity mapped to table "LOCATION".
 */
@SuppressWarnings("ALL")
@Entity(active = true)
public class Location implements java.io.Serializable {

    @Id
    @NotNull
    @Unique
    private String _id;
    private String _etag;
    private java.util.Date created;
    private java.util.Date updated;
    private Boolean active;
    private Boolean deleted;
    private String name;
    private String city;
    private String state;
    private String country;
    private String home_page;
    private String telephone;
    private String zip;
    private String image;
    private String campaign_id;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient LocationDao myDao;

    @ToOne(joinProperty = "campaign_id")
    private Campaign theCampaign;

    @Generated
    private transient String theCampaign__resolvedKey;

    @ToMany(joinProperties = {
        @JoinProperty(name = "_id", referencedName = "location_id")
    })
    private List<Devices> theLocationDevice;

    @ToMany(joinProperties = {
        @JoinProperty(name = "_id", referencedName = "location_id")
    })
    private List<Favorites> TheLocationFavorite;

    @Generated
    public Location() {
    }

    public Location(String _id) {
        this._id = _id;
    }

    @Generated
    public Location(String _id, String _etag, java.util.Date created, java.util.Date updated, Boolean active, Boolean deleted, String name, String city, String state, String country, String home_page, String telephone, String zip, String image, String campaign_id) {
        this._id = _id;
        this._etag = _etag;
        this.created = created;
        this.updated = updated;
        this.active = active;
        this.deleted = deleted;
        this.name = name;
        this.city = city;
        this.state = state;
        this.country = country;
        this.home_page = home_page;
        this.telephone = telephone;
        this.zip = zip;
        this.image = image;
        this.campaign_id = campaign_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getLocationDao() : null;
    }

    @NotNull
    public String get_id() {
        return _id;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void set_id(@NotNull String _id) {
        this._id = _id;
    }

    public String get_etag() {
        return _etag;
    }

    public void set_etag(String _etag) {
        this._etag = _etag;
    }

    public java.util.Date getCreated() {
        return created;
    }

    public void setCreated(java.util.Date created) {
        this.created = created;
    }

    public java.util.Date getUpdated() {
        return updated;
    }

    public void setUpdated(java.util.Date updated) {
        this.updated = updated;
    }

    public Boolean getActive() {
        return active;
    }

    public void setActive(Boolean active) {
        this.active = active;
    }

    public Boolean getDeleted() {
        return deleted;
    }

    public void setDeleted(Boolean deleted) {
        this.deleted = deleted;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getCity() {
        return city;
    }

    public void setCity(String city) {
        this.city = city;
    }

    public String getState() {
        return state;
    }

    public void setState(String state) {
        this.state = state;
    }

    public String getCountry() {
        return country;
    }

    public void setCountry(String country) {
        this.country = country;
    }

    public String getHome_page() {
        return home_page;
    }

    public void setHome_page(String home_page) {
        this.home_page = home_page;
    }

    public String getTelephone() {
        return telephone;
    }

    public void setTelephone(String telephone) {
        this.telephone = telephone;
    }

    public String getZip() {
        return zip;
    }

    public void setZip(String zip) {
        this.zip = zip;
    }

    public String getImage() {
        return image;
    }

    public void setImage(String image) {
        this.image = image;
    }

    public String getCampaign_id() {
        return campaign_id;
    }

    public void setCampaign_id(String campaign_id) {
        this.campaign_id = campaign_id;
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public Campaign getTheCampaign() {
        String __key = this.campaign_id;
        if (theCampaign__resolvedKey == null || theCampaign__resolvedKey != __key) {
            __throwIfDetached();
            CampaignDao targetDao = daoSession.getCampaignDao();
            Campaign theCampaignNew = targetDao.load(__key);
            synchronized (this) {
                theCampaign = theCampaignNew;
            	theCampaign__resolvedKey = __key;
            }
        }
        return theCampaign;
    }

    @Generated
    public void setTheCampaign(Campaign theCampaign) {
        synchronized (this) {
            this.theCampaign = theCampaign;
            campaign_id = theCampaign == null ? null : theCampaign.get_id();
            theCampaign__resolvedKey = campaign_id;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<Devices> getTheLocationDevice() {
        if (theLocationDevice == null) {
            __throwIfDetached();
            DevicesDao targetDao = daoSession.getDevicesDao();
            List<Devices> theLocationDeviceNew = targetDao._queryLocation_TheLocationDevice(_id);
            synchronized (this) {
                if(theLocationDevice == null) {
                    theLocationDevice = theLocationDeviceNew;
                }
            }
        }
        return theLocationDevice;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetTheLocationDevice() {
        theLocationDevice = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<Favorites> getTheLocationFavorite() {
        if (TheLocationFavorite == null) {
            __throwIfDetached();
            FavoritesDao targetDao = daoSession.getFavoritesDao();
            List<Favorites> TheLocationFavoriteNew = targetDao._queryLocation_TheLocationFavorite(_id);
            synchronized (this) {
                if(TheLocationFavorite == null) {
                    TheLocationFavorite = TheLocationFavoriteNew;
                }
            }
        }
        return TheLocationFavorite;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetTheLocationFavorite() {
        TheLocationFavorite = null;
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

}
