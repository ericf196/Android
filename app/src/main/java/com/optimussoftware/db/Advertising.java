package com.optimussoftware.db;

import org.greenrobot.greendao.annotation.*;

import java.util.List;
import com.optimussoftware.db.DaoSession;
import org.greenrobot.greendao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.

/**
 * Entity mapped to table "ADVERTISING".
 */
@SuppressWarnings("ALL")
@Entity(active = true)
public class Advertising implements java.io.Serializable {

    @Id
    @NotNull
    @Unique
    private String _id;
    private String _etag;
    private java.util.Date created;
    private java.util.Date updated;
    private Boolean active;
    private Boolean deleted;
    private String name;
    private Double price;
    private String description;
    private Boolean is_homepage;
    private Integer count_likes;
    private Integer count_dislikes;
    private Integer count_votes;
    private Integer acum_votes;
    private String location_id;
    private String campaign_id;
    private String device_id;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient AdvertisingDao myDao;

    @ToOne(joinProperty = "campaign_id")
    private Campaign TheAvertisings;

    @Generated
    private transient String TheAvertisings__resolvedKey;

    @ToOne(joinProperty = "device_id")
    private Devices theAdvertising;

    @Generated
    private transient String theAdvertising__resolvedKey;

    @ToMany(joinProperties = {
        @JoinProperty(name = "_id", referencedName = "advertising_id")
    })
    private List<Image> theAdvertisingImage;

    @ToMany(joinProperties = {
        @JoinProperty(name = "_id", referencedName = "advertising_id")
    })
    private List<Notification> theAdvertisingNotifi;

    @ToMany(joinProperties = {
        @JoinProperty(name = "_id", referencedName = "advertising_id")
    })
    private List<Review> TheAdvertisingReview;

    @ToMany(joinProperties = {
        @JoinProperty(name = "_id", referencedName = "advertising_id")
    })
    private List<Interest> theInterestAdvertising;

    @ToMany(joinProperties = {
        @JoinProperty(name = "_id", referencedName = "advertising_id")
    })
    private List<NotificationAdvertising> theNotifiAdvertising;

    @Generated
    public Advertising() {
    }

    public Advertising(String _id) {
        this._id = _id;
    }

    @Generated
    public Advertising(String _id, String _etag, java.util.Date created, java.util.Date updated, Boolean active, Boolean deleted, String name, Double price, String description, Boolean is_homepage, Integer count_likes, Integer count_dislikes, Integer count_votes, Integer acum_votes, String location_id, String campaign_id, String device_id) {
        this._id = _id;
        this._etag = _etag;
        this.created = created;
        this.updated = updated;
        this.active = active;
        this.deleted = deleted;
        this.name = name;
        this.price = price;
        this.description = description;
        this.is_homepage = is_homepage;
        this.count_likes = count_likes;
        this.count_dislikes = count_dislikes;
        this.count_votes = count_votes;
        this.acum_votes = acum_votes;
        this.location_id = location_id;
        this.campaign_id = campaign_id;
        this.device_id = device_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getAdvertisingDao() : null;
    }

    @NotNull
    public String get_id() {
        return _id;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void set_id(@NotNull String _id) {
        this._id = _id;
    }

    public String get_etag() {
        return _etag;
    }

    public void set_etag(String _etag) {
        this._etag = _etag;
    }

    public java.util.Date getCreated() {
        return created;
    }

    public void setCreated(java.util.Date created) {
        this.created = created;
    }

    public java.util.Date getUpdated() {
        return updated;
    }

    public void setUpdated(java.util.Date updated) {
        this.updated = updated;
    }

    public Boolean getActive() {
        return active;
    }

    public void setActive(Boolean active) {
        this.active = active;
    }

    public Boolean getDeleted() {
        return deleted;
    }

    public void setDeleted(Boolean deleted) {
        this.deleted = deleted;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Double getPrice() {
        return price;
    }

    public void setPrice(Double price) {
        this.price = price;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public Boolean getIs_homepage() {
        return is_homepage;
    }

    public void setIs_homepage(Boolean is_homepage) {
        this.is_homepage = is_homepage;
    }

    public Integer getCount_likes() {
        return count_likes;
    }

    public void setCount_likes(Integer count_likes) {
        this.count_likes = count_likes;
    }

    public Integer getCount_dislikes() {
        return count_dislikes;
    }

    public void setCount_dislikes(Integer count_dislikes) {
        this.count_dislikes = count_dislikes;
    }

    public Integer getCount_votes() {
        return count_votes;
    }

    public void setCount_votes(Integer count_votes) {
        this.count_votes = count_votes;
    }

    public Integer getAcum_votes() {
        return acum_votes;
    }

    public void setAcum_votes(Integer acum_votes) {
        this.acum_votes = acum_votes;
    }

    public String getLocation_id() {
        return location_id;
    }

    public void setLocation_id(String location_id) {
        this.location_id = location_id;
    }

    public String getCampaign_id() {
        return campaign_id;
    }

    public void setCampaign_id(String campaign_id) {
        this.campaign_id = campaign_id;
    }

    public String getDevice_id() {
        return device_id;
    }

    public void setDevice_id(String device_id) {
        this.device_id = device_id;
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public Campaign getTheAvertisings() {
        String __key = this.campaign_id;
        if (TheAvertisings__resolvedKey == null || TheAvertisings__resolvedKey != __key) {
            __throwIfDetached();
            CampaignDao targetDao = daoSession.getCampaignDao();
            Campaign TheAvertisingsNew = targetDao.load(__key);
            synchronized (this) {
                TheAvertisings = TheAvertisingsNew;
            	TheAvertisings__resolvedKey = __key;
            }
        }
        return TheAvertisings;
    }

    @Generated
    public void setTheAvertisings(Campaign TheAvertisings) {
        synchronized (this) {
            this.TheAvertisings = TheAvertisings;
            campaign_id = TheAvertisings == null ? null : TheAvertisings.get_id();
            TheAvertisings__resolvedKey = campaign_id;
        }
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public Devices getTheAdvertising() {
        String __key = this.device_id;
        if (theAdvertising__resolvedKey == null || theAdvertising__resolvedKey != __key) {
            __throwIfDetached();
            DevicesDao targetDao = daoSession.getDevicesDao();
            Devices theAdvertisingNew = targetDao.load(__key);
            synchronized (this) {
                theAdvertising = theAdvertisingNew;
            	theAdvertising__resolvedKey = __key;
            }
        }
        return theAdvertising;
    }

    @Generated
    public void setTheAdvertising(Devices theAdvertising) {
        synchronized (this) {
            this.theAdvertising = theAdvertising;
            device_id = theAdvertising == null ? null : theAdvertising.get_id();
            theAdvertising__resolvedKey = device_id;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<Image> getTheAdvertisingImage() {
        if (theAdvertisingImage == null) {
            __throwIfDetached();
            ImageDao targetDao = daoSession.getImageDao();
            List<Image> theAdvertisingImageNew = targetDao._queryAdvertising_TheAdvertisingImage(_id);
            synchronized (this) {
                if(theAdvertisingImage == null) {
                    theAdvertisingImage = theAdvertisingImageNew;
                }
            }
        }
        return theAdvertisingImage;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetTheAdvertisingImage() {
        theAdvertisingImage = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<Notification> getTheAdvertisingNotifi() {
        if (theAdvertisingNotifi == null) {
            __throwIfDetached();
            NotificationDao targetDao = daoSession.getNotificationDao();
            List<Notification> theAdvertisingNotifiNew = targetDao._queryAdvertising_TheAdvertisingNotifi(_id);
            synchronized (this) {
                if(theAdvertisingNotifi == null) {
                    theAdvertisingNotifi = theAdvertisingNotifiNew;
                }
            }
        }
        return theAdvertisingNotifi;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetTheAdvertisingNotifi() {
        theAdvertisingNotifi = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<Review> getTheAdvertisingReview() {
        if (TheAdvertisingReview == null) {
            __throwIfDetached();
            ReviewDao targetDao = daoSession.getReviewDao();
            List<Review> TheAdvertisingReviewNew = targetDao._queryAdvertising_TheAdvertisingReview(_id);
            synchronized (this) {
                if(TheAdvertisingReview == null) {
                    TheAdvertisingReview = TheAdvertisingReviewNew;
                }
            }
        }
        return TheAdvertisingReview;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetTheAdvertisingReview() {
        TheAdvertisingReview = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<Interest> getTheInterestAdvertising() {
        if (theInterestAdvertising == null) {
            __throwIfDetached();
            InterestDao targetDao = daoSession.getInterestDao();
            List<Interest> theInterestAdvertisingNew = targetDao._queryAdvertising_TheInterestAdvertising(_id);
            synchronized (this) {
                if(theInterestAdvertising == null) {
                    theInterestAdvertising = theInterestAdvertisingNew;
                }
            }
        }
        return theInterestAdvertising;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetTheInterestAdvertising() {
        theInterestAdvertising = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<NotificationAdvertising> getTheNotifiAdvertising() {
        if (theNotifiAdvertising == null) {
            __throwIfDetached();
            NotificationAdvertisingDao targetDao = daoSession.getNotificationAdvertisingDao();
            List<NotificationAdvertising> theNotifiAdvertisingNew = targetDao._queryAdvertising_TheNotifiAdvertising(_id);
            synchronized (this) {
                if(theNotifiAdvertising == null) {
                    theNotifiAdvertising = theNotifiAdvertisingNew;
                }
            }
        }
        return theNotifiAdvertising;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetTheNotifiAdvertising() {
        theNotifiAdvertising = null;
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

}
