package com.optimussoftware.db;

import org.greenrobot.greendao.annotation.*;

import com.optimussoftware.db.DaoSession;
import org.greenrobot.greendao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.

/**
 * Entity mapped to table "REVIEW".
 */
@SuppressWarnings("ALL")
@Entity(active = true)
public class Review implements java.io.Serializable {

    @Id
    @NotNull
    @Unique
    private String _id;
    private String _etag;
    private java.util.Date created;
    private java.util.Date updated;
    private Boolean active;
    private Boolean deleted;
    private Integer vote;
    private String comment;
    private String lang;
    private String first_name;
    private String last_name;
    private String profile_photo;

    @NotNull
    private String advertising_id;

    @NotNull
    private String user_id;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient ReviewDao myDao;

    @ToOne(joinProperty = "advertising_id")
    private Advertising theReview;

    @Generated
    private transient String theReview__resolvedKey;

    @ToOne(joinProperty = "user_id")
    private User theReviews;

    @Generated
    private transient String theReviews__resolvedKey;

    @Generated
    public Review() {
    }

    public Review(String _id) {
        this._id = _id;
    }

    @Generated
    public Review(String _id, String _etag, java.util.Date created, java.util.Date updated, Boolean active, Boolean deleted, Integer vote, String comment, String lang, String first_name, String last_name, String profile_photo, String advertising_id, String user_id) {
        this._id = _id;
        this._etag = _etag;
        this.created = created;
        this.updated = updated;
        this.active = active;
        this.deleted = deleted;
        this.vote = vote;
        this.comment = comment;
        this.lang = lang;
        this.first_name = first_name;
        this.last_name = last_name;
        this.profile_photo = profile_photo;
        this.advertising_id = advertising_id;
        this.user_id = user_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getReviewDao() : null;
    }

    @NotNull
    public String get_id() {
        return _id;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void set_id(@NotNull String _id) {
        this._id = _id;
    }

    public String get_etag() {
        return _etag;
    }

    public void set_etag(String _etag) {
        this._etag = _etag;
    }

    public java.util.Date getCreated() {
        return created;
    }

    public void setCreated(java.util.Date created) {
        this.created = created;
    }

    public java.util.Date getUpdated() {
        return updated;
    }

    public void setUpdated(java.util.Date updated) {
        this.updated = updated;
    }

    public Boolean getActive() {
        return active;
    }

    public void setActive(Boolean active) {
        this.active = active;
    }

    public Boolean getDeleted() {
        return deleted;
    }

    public void setDeleted(Boolean deleted) {
        this.deleted = deleted;
    }

    public Integer getVote() {
        return vote;
    }

    public void setVote(Integer vote) {
        this.vote = vote;
    }

    public String getComment() {
        return comment;
    }

    public void setComment(String comment) {
        this.comment = comment;
    }

    public String getLang() {
        return lang;
    }

    public void setLang(String lang) {
        this.lang = lang;
    }

    public String getFirst_name() {
        return first_name;
    }

    public void setFirst_name(String first_name) {
        this.first_name = first_name;
    }

    public String getLast_name() {
        return last_name;
    }

    public void setLast_name(String last_name) {
        this.last_name = last_name;
    }

    public String getProfile_photo() {
        return profile_photo;
    }

    public void setProfile_photo(String profile_photo) {
        this.profile_photo = profile_photo;
    }

    @NotNull
    public String getAdvertising_id() {
        return advertising_id;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setAdvertising_id(@NotNull String advertising_id) {
        this.advertising_id = advertising_id;
    }

    @NotNull
    public String getUser_id() {
        return user_id;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setUser_id(@NotNull String user_id) {
        this.user_id = user_id;
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public Advertising getTheReview() {
        String __key = this.advertising_id;
        if (theReview__resolvedKey == null || theReview__resolvedKey != __key) {
            __throwIfDetached();
            AdvertisingDao targetDao = daoSession.getAdvertisingDao();
            Advertising theReviewNew = targetDao.load(__key);
            synchronized (this) {
                theReview = theReviewNew;
            	theReview__resolvedKey = __key;
            }
        }
        return theReview;
    }

    @Generated
    public void setTheReview(@NotNull Advertising theReview) {
        if (theReview == null) {
            throw new DaoException("To-one property 'advertising_id' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.theReview = theReview;
            advertising_id = theReview.get_id();
            theReview__resolvedKey = advertising_id;
        }
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public User getTheReviews() {
        String __key = this.user_id;
        if (theReviews__resolvedKey == null || theReviews__resolvedKey != __key) {
            __throwIfDetached();
            UserDao targetDao = daoSession.getUserDao();
            User theReviewsNew = targetDao.load(__key);
            synchronized (this) {
                theReviews = theReviewsNew;
            	theReviews__resolvedKey = __key;
            }
        }
        return theReviews;
    }

    @Generated
    public void setTheReviews(@NotNull User theReviews) {
        if (theReviews == null) {
            throw new DaoException("To-one property 'user_id' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.theReviews = theReviews;
            user_id = theReviews.get_id();
            theReviews__resolvedKey = user_id;
        }
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

}
