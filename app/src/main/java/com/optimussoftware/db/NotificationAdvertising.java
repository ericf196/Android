package com.optimussoftware.db;

import org.greenrobot.greendao.annotation.*;

import com.optimussoftware.db.DaoSession;
import org.greenrobot.greendao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.

/**
 * Entity mapped to table "NOTIFICATION_ADVERTISING".
 */
@SuppressWarnings("ALL")
@Entity(active = true)
public class NotificationAdvertising implements java.io.Serializable {

    @Id
    @NotNull
    @Unique
    private String _id;
    private java.util.Date date;
    private Boolean viewed;
    private Boolean delete;

    @NotNull
    private String advertising_id;

    @NotNull
    private String campaign_id;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient NotificationAdvertisingDao myDao;

    @ToOne(joinProperty = "advertising_id")
    private Advertising TheNotifiA;

    @Generated
    private transient String TheNotifiA__resolvedKey;

    @ToOne(joinProperty = "campaign_id")
    private Campaign TheNotifiC;

    @Generated
    private transient String TheNotifiC__resolvedKey;

    @Generated
    public NotificationAdvertising() {
    }

    public NotificationAdvertising(String _id) {
        this._id = _id;
    }

    @Generated
    public NotificationAdvertising(String _id, java.util.Date date, Boolean viewed, Boolean delete, String advertising_id, String campaign_id) {
        this._id = _id;
        this.date = date;
        this.viewed = viewed;
        this.delete = delete;
        this.advertising_id = advertising_id;
        this.campaign_id = campaign_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getNotificationAdvertisingDao() : null;
    }

    @NotNull
    public String get_id() {
        return _id;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void set_id(@NotNull String _id) {
        this._id = _id;
    }

    public java.util.Date getDate() {
        return date;
    }

    public void setDate(java.util.Date date) {
        this.date = date;
    }

    public Boolean getViewed() {
        return viewed;
    }

    public void setViewed(Boolean viewed) {
        this.viewed = viewed;
    }

    public Boolean getDelete() {
        return delete;
    }

    public void setDelete(Boolean delete) {
        this.delete = delete;
    }

    @NotNull
    public String getAdvertising_id() {
        return advertising_id;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setAdvertising_id(@NotNull String advertising_id) {
        this.advertising_id = advertising_id;
    }

    @NotNull
    public String getCampaign_id() {
        return campaign_id;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setCampaign_id(@NotNull String campaign_id) {
        this.campaign_id = campaign_id;
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public Advertising getTheNotifiA() {
        String __key = this.advertising_id;
        if (TheNotifiA__resolvedKey == null || TheNotifiA__resolvedKey != __key) {
            __throwIfDetached();
            AdvertisingDao targetDao = daoSession.getAdvertisingDao();
            Advertising TheNotifiANew = targetDao.load(__key);
            synchronized (this) {
                TheNotifiA = TheNotifiANew;
            	TheNotifiA__resolvedKey = __key;
            }
        }
        return TheNotifiA;
    }

    @Generated
    public void setTheNotifiA(@NotNull Advertising TheNotifiA) {
        if (TheNotifiA == null) {
            throw new DaoException("To-one property 'advertising_id' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.TheNotifiA = TheNotifiA;
            advertising_id = TheNotifiA.get_id();
            TheNotifiA__resolvedKey = advertising_id;
        }
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public Campaign getTheNotifiC() {
        String __key = this.campaign_id;
        if (TheNotifiC__resolvedKey == null || TheNotifiC__resolvedKey != __key) {
            __throwIfDetached();
            CampaignDao targetDao = daoSession.getCampaignDao();
            Campaign TheNotifiCNew = targetDao.load(__key);
            synchronized (this) {
                TheNotifiC = TheNotifiCNew;
            	TheNotifiC__resolvedKey = __key;
            }
        }
        return TheNotifiC;
    }

    @Generated
    public void setTheNotifiC(@NotNull Campaign TheNotifiC) {
        if (TheNotifiC == null) {
            throw new DaoException("To-one property 'campaign_id' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.TheNotifiC = TheNotifiC;
            campaign_id = TheNotifiC.get_id();
            TheNotifiC__resolvedKey = campaign_id;
        }
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

}
