package com.optimussoftware.db;

import org.greenrobot.greendao.annotation.*;

import java.util.List;
import com.optimussoftware.db.DaoSession;
import org.greenrobot.greendao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.

/**
 * Entity mapped to table "DEVICES".
 */
@SuppressWarnings("ALL")
@Entity(active = true)
public class Devices implements java.io.Serializable {

    @Id
    @NotNull
    @Unique
    private String _id;
    private String _etag;
    private java.util.Date created;
    private java.util.Date updated;
    private Boolean active;
    private Boolean deleted;
    private String name_key;
    private String description;
    private String uuid;
    private String mac;
    private Integer major;
    private Integer minor;
    private Integer rssi;
    private Integer namespace;
    private Integer instance;
    private Integer type;
    private String url;
    private String message_for_user;
    private Boolean is_single;

    @NotNull
    private String location_id;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient DevicesDao myDao;

    @ToOne(joinProperty = "location_id")
    private Location theDevices;

    @Generated
    private transient String theDevices__resolvedKey;

    @ToMany(joinProperties = {
        @JoinProperty(name = "_id", referencedName = "device_id")
    })
    private List<Advertising> theDeviceAdvertising;

    @Generated
    public Devices() {
    }

    public Devices(String _id) {
        this._id = _id;
    }

    @Generated
    public Devices(String _id, String _etag, java.util.Date created, java.util.Date updated, Boolean active, Boolean deleted, String name_key, String description, String uuid, String mac, Integer major, Integer minor, Integer rssi, Integer namespace, Integer instance, Integer type, String url, String message_for_user, Boolean is_single, String location_id) {
        this._id = _id;
        this._etag = _etag;
        this.created = created;
        this.updated = updated;
        this.active = active;
        this.deleted = deleted;
        this.name_key = name_key;
        this.description = description;
        this.uuid = uuid;
        this.mac = mac;
        this.major = major;
        this.minor = minor;
        this.rssi = rssi;
        this.namespace = namespace;
        this.instance = instance;
        this.type = type;
        this.url = url;
        this.message_for_user = message_for_user;
        this.is_single = is_single;
        this.location_id = location_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getDevicesDao() : null;
    }

    @NotNull
    public String get_id() {
        return _id;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void set_id(@NotNull String _id) {
        this._id = _id;
    }

    public String get_etag() {
        return _etag;
    }

    public void set_etag(String _etag) {
        this._etag = _etag;
    }

    public java.util.Date getCreated() {
        return created;
    }

    public void setCreated(java.util.Date created) {
        this.created = created;
    }

    public java.util.Date getUpdated() {
        return updated;
    }

    public void setUpdated(java.util.Date updated) {
        this.updated = updated;
    }

    public Boolean getActive() {
        return active;
    }

    public void setActive(Boolean active) {
        this.active = active;
    }

    public Boolean getDeleted() {
        return deleted;
    }

    public void setDeleted(Boolean deleted) {
        this.deleted = deleted;
    }

    public String getName_key() {
        return name_key;
    }

    public void setName_key(String name_key) {
        this.name_key = name_key;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public String getUuid() {
        return uuid;
    }

    public void setUuid(String uuid) {
        this.uuid = uuid;
    }

    public String getMac() {
        return mac;
    }

    public void setMac(String mac) {
        this.mac = mac;
    }

    public Integer getMajor() {
        return major;
    }

    public void setMajor(Integer major) {
        this.major = major;
    }

    public Integer getMinor() {
        return minor;
    }

    public void setMinor(Integer minor) {
        this.minor = minor;
    }

    public Integer getRssi() {
        return rssi;
    }

    public void setRssi(Integer rssi) {
        this.rssi = rssi;
    }

    public Integer getNamespace() {
        return namespace;
    }

    public void setNamespace(Integer namespace) {
        this.namespace = namespace;
    }

    public Integer getInstance() {
        return instance;
    }

    public void setInstance(Integer instance) {
        this.instance = instance;
    }

    public Integer getType() {
        return type;
    }

    public void setType(Integer type) {
        this.type = type;
    }

    public String getUrl() {
        return url;
    }

    public void setUrl(String url) {
        this.url = url;
    }

    public String getMessage_for_user() {
        return message_for_user;
    }

    public void setMessage_for_user(String message_for_user) {
        this.message_for_user = message_for_user;
    }

    public Boolean getIs_single() {
        return is_single;
    }

    public void setIs_single(Boolean is_single) {
        this.is_single = is_single;
    }

    @NotNull
    public String getLocation_id() {
        return location_id;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setLocation_id(@NotNull String location_id) {
        this.location_id = location_id;
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public Location getTheDevices() {
        String __key = this.location_id;
        if (theDevices__resolvedKey == null || theDevices__resolvedKey != __key) {
            __throwIfDetached();
            LocationDao targetDao = daoSession.getLocationDao();
            Location theDevicesNew = targetDao.load(__key);
            synchronized (this) {
                theDevices = theDevicesNew;
            	theDevices__resolvedKey = __key;
            }
        }
        return theDevices;
    }

    @Generated
    public void setTheDevices(@NotNull Location theDevices) {
        if (theDevices == null) {
            throw new DaoException("To-one property 'location_id' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.theDevices = theDevices;
            location_id = theDevices.get_id();
            theDevices__resolvedKey = location_id;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<Advertising> getTheDeviceAdvertising() {
        if (theDeviceAdvertising == null) {
            __throwIfDetached();
            AdvertisingDao targetDao = daoSession.getAdvertisingDao();
            List<Advertising> theDeviceAdvertisingNew = targetDao._queryDevices_TheDeviceAdvertising(_id);
            synchronized (this) {
                if(theDeviceAdvertising == null) {
                    theDeviceAdvertising = theDeviceAdvertisingNew;
                }
            }
        }
        return theDeviceAdvertising;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetTheDeviceAdvertising() {
        theDeviceAdvertising = null;
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

}
